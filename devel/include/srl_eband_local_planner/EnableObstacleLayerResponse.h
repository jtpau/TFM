// Generated by gencpp from file srl_eband_local_planner/EnableObstacleLayerResponse.msg
// DO NOT EDIT!


#ifndef SRL_EBAND_LOCAL_PLANNER_MESSAGE_ENABLEOBSTACLELAYERRESPONSE_H
#define SRL_EBAND_LOCAL_PLANNER_MESSAGE_ENABLEOBSTACLELAYERRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace srl_eband_local_planner
{
template <class ContainerAllocator>
struct EnableObstacleLayerResponse_
{
  typedef EnableObstacleLayerResponse_<ContainerAllocator> Type;

  EnableObstacleLayerResponse_()
    : enabled(false)  {
    }
  EnableObstacleLayerResponse_(const ContainerAllocator& _alloc)
    : enabled(false)  {
  (void)_alloc;
    }



   typedef uint8_t _enabled_type;
  _enabled_type enabled;





  typedef boost::shared_ptr< ::srl_eband_local_planner::EnableObstacleLayerResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::srl_eband_local_planner::EnableObstacleLayerResponse_<ContainerAllocator> const> ConstPtr;

}; // struct EnableObstacleLayerResponse_

typedef ::srl_eband_local_planner::EnableObstacleLayerResponse_<std::allocator<void> > EnableObstacleLayerResponse;

typedef boost::shared_ptr< ::srl_eband_local_planner::EnableObstacleLayerResponse > EnableObstacleLayerResponsePtr;
typedef boost::shared_ptr< ::srl_eband_local_planner::EnableObstacleLayerResponse const> EnableObstacleLayerResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::srl_eband_local_planner::EnableObstacleLayerResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::srl_eband_local_planner::EnableObstacleLayerResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::srl_eband_local_planner::EnableObstacleLayerResponse_<ContainerAllocator1> & lhs, const ::srl_eband_local_planner::EnableObstacleLayerResponse_<ContainerAllocator2> & rhs)
{
  return lhs.enabled == rhs.enabled;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::srl_eband_local_planner::EnableObstacleLayerResponse_<ContainerAllocator1> & lhs, const ::srl_eband_local_planner::EnableObstacleLayerResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace srl_eband_local_planner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::srl_eband_local_planner::EnableObstacleLayerResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::srl_eband_local_planner::EnableObstacleLayerResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srl_eband_local_planner::EnableObstacleLayerResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::srl_eband_local_planner::EnableObstacleLayerResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srl_eband_local_planner::EnableObstacleLayerResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::srl_eband_local_planner::EnableObstacleLayerResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::srl_eband_local_planner::EnableObstacleLayerResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2815464f55ab63684cc1bc38072d0b9b";
  }

  static const char* value(const ::srl_eband_local_planner::EnableObstacleLayerResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2815464f55ab6368ULL;
  static const uint64_t static_value2 = 0x4cc1bc38072d0b9bULL;
};

template<class ContainerAllocator>
struct DataType< ::srl_eband_local_planner::EnableObstacleLayerResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "srl_eband_local_planner/EnableObstacleLayerResponse";
  }

  static const char* value(const ::srl_eband_local_planner::EnableObstacleLayerResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::srl_eband_local_planner::EnableObstacleLayerResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# response fields\n"
"bool                              enabled\n"
"\n"
;
  }

  static const char* value(const ::srl_eband_local_planner::EnableObstacleLayerResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::srl_eband_local_planner::EnableObstacleLayerResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enabled);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EnableObstacleLayerResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::srl_eband_local_planner::EnableObstacleLayerResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::srl_eband_local_planner::EnableObstacleLayerResponse_<ContainerAllocator>& v)
  {
    s << indent << "enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enabled);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SRL_EBAND_LOCAL_PLANNER_MESSAGE_ENABLEOBSTACLELAYERRESPONSE_H
